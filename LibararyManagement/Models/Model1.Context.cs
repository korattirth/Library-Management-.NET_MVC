//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibararyManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Libarary_ManagementEntities : DbContext
    {
        public Libarary_ManagementEntities()
            : base("name=Libarary_ManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BookIssue> BookIssues { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
    
        public virtual int addBookIssueData(Nullable<int> bookId, Nullable<int> userId, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> expectedReturnDate)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var expectedReturnDateParameter = expectedReturnDate.HasValue ?
                new ObjectParameter("ExpectedReturnDate", expectedReturnDate) :
                new ObjectParameter("ExpectedReturnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addBookIssueData", bookIdParameter, userIdParameter, issueDateParameter, expectedReturnDateParameter);
        }
    
        public virtual int AddEditBook(Nullable<int> bookId, string bookName, string author, string subject, string bookCoverPage, string language, Nullable<int> page)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var bookNameParameter = bookName != null ?
                new ObjectParameter("BookName", bookName) :
                new ObjectParameter("BookName", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bookCoverPageParameter = bookCoverPage != null ?
                new ObjectParameter("BookCoverPage", bookCoverPage) :
                new ObjectParameter("BookCoverPage", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditBook", bookIdParameter, bookNameParameter, authorParameter, subjectParameter, bookCoverPageParameter, languageParameter, pageParameter);
        }
    
        public virtual int AddNewBook(string bookName, string author, string subject, string bookCoverPage, string language, Nullable<int> page)
        {
            var bookNameParameter = bookName != null ?
                new ObjectParameter("BookName", bookName) :
                new ObjectParameter("BookName", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bookCoverPageParameter = bookCoverPage != null ?
                new ObjectParameter("BookCoverPage", bookCoverPage) :
                new ObjectParameter("BookCoverPage", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewBook", bookNameParameter, authorParameter, subjectParameter, bookCoverPageParameter, languageParameter, pageParameter);
        }
    
        public virtual int addReturnDate(Nullable<int> bookId, Nullable<System.DateTime> returnDate)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addReturnDate", bookIdParameter, returnDateParameter);
        }
    
        public virtual int addStatus(Nullable<int> bookId, Nullable<int> status)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addStatus", bookIdParameter, statusParameter);
        }
    
        public virtual int AddUserDetail(string firstName, string lastName, string phoneNumber, string email, string address, string password, Nullable<int> userTypeId, Nullable<int> isActive)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserDetail", firstNameParameter, lastNameParameter, phoneNumberParameter, emailParameter, addressParameter, passwordParameter, userTypeIdParameter, isActiveParameter);
        }
    
        public virtual int cheakReturnDateForStatus(Nullable<System.DateTime> returnDate, Nullable<int> bookId)
        {
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cheakReturnDateForStatus", returnDateParameter, bookIdParameter);
        }
    
        public virtual int DeleteBook(Nullable<int> bookId)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBook", bookIdParameter);
        }
    
        public virtual ObjectResult<getAllAvailbleBook_Result> getAllAvailbleBook(Nullable<int> pageNumber, Nullable<int> rowNumber)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var rowNumberParameter = rowNumber.HasValue ?
                new ObjectParameter("RowNumber", rowNumber) :
                new ObjectParameter("RowNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllAvailbleBook_Result>("getAllAvailbleBook", pageNumberParameter, rowNumberParameter);
        }
    
        public virtual ObjectResult<GetAllBooks_Result> GetAllBooks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBooks_Result>("GetAllBooks");
        }
    
        public virtual ObjectResult<getAllIssueBook_Result> getAllIssueBook(Nullable<int> pageNumber, Nullable<int> rowNumber)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var rowNumberParameter = rowNumber.HasValue ?
                new ObjectParameter("RowNumber", rowNumber) :
                new ObjectParameter("RowNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllIssueBook_Result>("getAllIssueBook", pageNumberParameter, rowNumberParameter);
        }
    
        public virtual ObjectResult<getAllIssueBookHistory_Result> getAllIssueBookHistory(Nullable<int> rowNumber, Nullable<int> pageNumber)
        {
            var rowNumberParameter = rowNumber.HasValue ?
                new ObjectParameter("RowNumber", rowNumber) :
                new ObjectParameter("RowNumber", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllIssueBookHistory_Result>("getAllIssueBookHistory", rowNumberParameter, pageNumberParameter);
        }
    
        public virtual ObjectResult<GetDeleteBook_Result> GetDeleteBook(Nullable<int> bookId)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeleteBook_Result>("GetDeleteBook", bookIdParameter);
        }
    
        public virtual ObjectResult<GetEditBook_Result> GetEditBook(Nullable<int> bookId)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEditBook_Result>("GetEditBook", bookIdParameter);
        }
    
        public virtual ObjectResult<getReader_Result> getReader()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getReader_Result>("getReader");
        }
    
        public virtual ObjectResult<LoginUser_Result> LoginUser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginUser_Result>("LoginUser", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Pagination_Result> Pagination(Nullable<int> pageNumber, Nullable<int> rowNumber)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var rowNumberParameter = rowNumber.HasValue ?
                new ObjectParameter("RowNumber", rowNumber) :
                new ObjectParameter("RowNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pagination_Result>("Pagination", pageNumberParameter, rowNumberParameter);
        }
    
        public virtual ObjectResult<getAllUser_Result> getAllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllUser_Result>("getAllUser");
        }
    
        public virtual int blockUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("blockUser", userIdParameter);
        }
    
        public virtual int unBlockUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("unBlockUser", userIdParameter);
        }
    
        public virtual ObjectResult<getAllUsersWithLibrarian_Result> getAllUsersWithLibrarian()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllUsersWithLibrarian_Result>("getAllUsersWithLibrarian");
        }
    
        public virtual int addvalidationForBookIssue(Nullable<int> userId, Nullable<System.DateTime> issueDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addvalidationForBookIssue", userIdParameter, issueDateParameter);
        }
    
        public virtual int EditUser(Nullable<int> userId, string firstName, string lastName, string phoneNumber, string address, string email)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUser", userIdParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, addressParameter, emailParameter);
        }
    
        public virtual ObjectResult<getEditUser_Result> getEditUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEditUser_Result>("getEditUser", idParameter);
        }
    
        public virtual int deleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUser", userIdParameter);
        }
    
        public virtual ObjectResult<getDeleteUser_Result> getDeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDeleteUser_Result>("getDeleteUser", userIdParameter);
        }
    }
}
